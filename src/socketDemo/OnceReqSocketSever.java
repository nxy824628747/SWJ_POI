package socketDemo;import java.io.*;import java.net.ServerSocket;import java.net.Socket;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class OnceReqSocketSever extends Thread {    private volatile ServerSocket serverSocket = null;    static String rn=System.lineSeparator();    public OnceReqSocketSever(int port) {        initSever(port);    }    @Override    public void run() {        onceSever();    }    public final void initSever(int port) {        if (serverSocket == null) {            synchronized (OnceReqSocketSever.class) {                if (serverSocket == null) {                    try {                        serverSocket = new ServerSocket(port);                    } catch (IOException e) {                        System.out.println("在  " + port + "  端口建立监听失败！");                        e.printStackTrace();                    }                }            }        }else{            throw new RuntimeException("服务端已存在SeverSocket且正在运行!");        }    }    public void onceSever() {        if (serverSocket == null) {            System.out.println("未在成功开启监听！");            return;        }        try {            System.out.println("开启服务端");            ExecutorService executorService = Executors.newFixedThreadPool(100);            while (true) {                Socket socket = serverSocket.accept();                BufferedReader bufferReader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"));                BufferedWriter bufferWrite = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF-8"));                final Object[] objs = new Object[2];                objs[0] = bufferReader;                objs[1] = bufferWrite;                Runnable readThread =                        new Runnable() {                            private BufferedReader bufferReader = null;                            private BufferedWriter bufferWrite = null;                            public Runnable InitBuffers(BufferedReader bufferReader, BufferedWriter bufferWrite) {                                this.bufferReader = bufferReader;                                this.bufferWrite = bufferWrite;                                return this;                            }                            @Override                            public void run() {                                String threadName = Thread.currentThread().getName();                                System.out.println(threadName + "  建立连接 :  " + socket.toString());                                try {                                    String str;                                    while ((str = this.bufferReader.readLine()) != null) {                                        System.out.println(threadName + "服务端接收到  ： " + str);                                        this.bufferWrite.write("服务端" + threadName + "线程已收到：" + str + "  ;可以接收下一条消息，over");                                        this.bufferWrite.write("\n");                                        this.bufferWrite.flush();                                    }                                } catch (IOException e) {                                    e.printStackTrace();                                } finally {                                    IOTools.closeInputStream(this.bufferReader);                                    IOTools.closeOutputStream(this.bufferWrite);                                    IOTools.closeSocket(socket);                                    System.out.println(threadName + " 的 " + socket.toString() + " 连接已关闭");                                }                            }                        }.InitBuffers(bufferReader, bufferWrite);                Runnable writeThread =                        new Runnable() {                            private BufferedReader bufferReader = null;                            private BufferedWriter bufferWrite = null;                            private BufferedReader scanReader = new BufferedReader(new InputStreamReader(System.in, "UTF-8"));                            public Runnable InitBuffers(BufferedReader bufferReader, BufferedWriter bufferWrite) {                                this.bufferReader = bufferReader;                                this.bufferWrite = bufferWrite;                                return this;                            }                            @Override                            public void run() {                                String threadName = Thread.currentThread().getName();                                String str;                                try {                                    while ((str = scanReader.readLine()) != null) {                                        this.bufferWrite.write(str);                                        this.bufferWrite.write(rn);                                        this.bufferWrite.flush();                                    }                                } catch (IOException e) {                                    e.printStackTrace();                                }                            }                        }.InitBuffers(bufferReader, bufferWrite);                executorService.submit(readThread);                executorService.submit(writeThread);            }        } catch (IOException e) {            System.out.println("与客户端建立连接失败！");            e.printStackTrace();        }    }}