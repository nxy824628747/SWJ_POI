package learning;import learning.sort.Sort;import java.util.LinkedList;import java.util.List;import java.util.Set;import java.util.Stack;class SortTree {    List<String> result=new LinkedList<String>();    public List<String> restoreIpAddresses(String s) {        if(s==null){            return result;        }        restoreIpAddresses(s,0,s.length(),0);        return result;    }    public void restoreIpAddresses(String s,int depth,int length,int flag) {        if(flag==3){            int length0=s.length();            int last=s.lastIndexOf('.');            String temp=s.substring(last+1,length0);            if(temp.length()>4||temp.length()==0){                return;            }            if(Integer.valueOf(temp)>255){                return;            }            if(temp.length()>1&&temp.substring(0,1).equals("0")){                return;            }            result.add(s);            return;        }        if(depth>=s.length()){            return;        }        String temp00=s.substring(0,depth+1)+"."+s.substring(depth+1,s.length());        restoreIpAddresses(temp00,depth+2,length+1,flag+1);        if(s.length()-depth>=2) {            String te=s.substring(depth,depth+2);            String c=te.substring(0,1);            if(te.substring(0,1).equals("0")){                return;            }            String temp0 = s.substring(0, depth + 2) + "." + s.substring(depth + 2, s.length());            restoreIpAddresses(temp0, depth + 3, length + 1, flag + 1);        }        if(s.length()-depth>=3) {            String te=s.substring(depth,depth+3);            String c=te.substring(0,1);            if(te.substring(0,1).equals("0")){                return;            }            if ((Integer.valueOf(s.substring(depth, depth + 3))) > 255) {                return;            }            String temp1 = s.substring(0, depth + 3) + "." + s.substring(depth + 3, s.length());            restoreIpAddresses(temp1, depth + 4, length + 1, flag + 1);        }    }    public static void main(String[] args){        SortTree s=new SortTree();        Stack stack;        s.restoreIpAddresses("010010");    }}