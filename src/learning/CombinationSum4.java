package learning;import java.util.HashMap;import java.util.Map;import java.util.Set;/** * @Author Nxy * @Date 2019/12/21 23:58 * @Description leetcode 组合总和IV */public class CombinationSum4 {    /**     * @Author Nxy     * @Date 2019/12/22 0:24     * @Param     * @Return     * @Exception     * @Description DP解法     */    public int combinationSum4III(int[] nums, int target) {        if (nums == null) {            return 0;        }        int length = nums.length;        int[] cache = new int[target + 1];        cache[0] = 1;        for (int i = 1; i <= target; i++) {            int temp = 0;            for (int j = 0; j < length; j++) {                if (i - nums[j] == 0) {                    temp++;                    continue;                }                if (i - nums[j] > 0) {                    temp += cache[i - nums[j]];                }            }            cache[i] = temp;        }        return cache[target];    }    /**     * @Author Nxy     * @Date 2019/12/21 23:59     * @Param     * @Return     * @Exception     * @Description 分治加缓存     */    public int combinationSum4II(int[] nums, int target) {        if (nums == null) {            return 0;        }        int length = nums.length;        Map<Integer, Integer> cache = new HashMap<Integer, Integer>();        return combinationSum4II(nums, target, length, cache);    }    public int combinationSum4II(int[] nums, int target, int length, Map<Integer, Integer> cache) {        if (target < 0) {            return 0;        }        if (target == 0) {            return 1;        }        Set s = cache.keySet();        if (s.contains(target)) {            return cache.get(target);        }        int temp = 0;        for (int i = 0; i < length; i++) {            temp += combinationSum4II(nums, target - nums[i], length, cache);        }        cache.put(target, temp);        return temp;    }    /**     * @Author Nxy     * @Date 2019/12/21 14:59     * @Param     * @Return     * @Exception     * @Description 递归搜索     */    int i = 0;    public int combinationSum4(int[] nums, int target) {        if (nums == null) {            return 0;        }        combinationSum4(nums, 0, target);        return i;    }    public void combinationSum4(int[] nums, int beforeRe, int target) {        if (beforeRe > target) {            return;        }        if (beforeRe == target) {            i++;            return;        }        int length = nums.length;        for (int i = 0; i < length; i++) {            int tempRe = beforeRe + nums[i];            combinationSum4(nums, tempRe, target);        }    }    public static void main(String[] args) {        CombinationSum4 c = new CombinationSum4();        int[] nums = {2, 4, 5, 6, 1, 7, 8, 9};        int target = 35;        double currentTime = System.currentTimeMillis();//        System.out.println(c.combinationSum4(nums, target));//        System.out.println("递归用时   ：  " + String.valueOf(System.currentTimeMillis() - currentTime));        currentTime = System.currentTimeMillis();        System.out.println(c.combinationSum4II(nums, target));        System.out.println("分治用时   ：  " + String.valueOf(System.currentTimeMillis() - currentTime));        currentTime = System.currentTimeMillis();        System.out.println(c.combinationSum4III(nums, target));        System.out.println("DP用时   ：  " + String.valueOf(System.currentTimeMillis() - currentTime));    }}