package learning;import java.util.ArrayList;import java.util.List;public class LeetCodeEasy000 {    public int minCostToMoveChips(int[] chips) {        if(chips==null){return 0;}        int length=chips.length;        int min=Integer.MAX_VALUE;        for(int i=0;i<length;i++){            int temp=minCostToMoveChips(length,i,chips);            if(temp<min){                min=temp;            }        }        return min;    }    public int minCostToMoveChips(int length,int flag,int[] chips){        int target=chips[flag];        List<Integer> flags=new ArrayList<Integer>();        for(int i=0;i<length;i++){            if(target==chips[i]){                flags.add(i);            }        }        int size=flags.size();        //所有点到目标点集合的最小代价        int result=0;        for(int i=0;i<length;i++){            //一个点到目标点集合的最小代价            int minPoint=Integer.MAX_VALUE;            for(int j=0;j<size;j++){                int temp=flags.get(j);                int resultPoint=minCostToMoveChips(i,temp);                if(resultPoint<minPoint){minPoint=resultPoint;}            }            if(minPoint!=Integer.MAX_VALUE){result+=minPoint;}            minPoint=Integer.MAX_VALUE;        }        return result;    }    // 一个点到一个点的代价    public int minCostToMoveChips(int flag,int source){        int result=0;        int temp=source-flag;        if(temp%2!=0){result+=1;}        return result;    }    public static void main(String[] args){        int[] source={1,2,2,2,2};        LeetCodeEasy000 l=new LeetCodeEasy000();        l.minCostToMoveChips(source);//        System.out.println((-1)%2);    }}