package learning.sort;/** * @Author Nxy * @Date 2019/12/5 15:32 * @Description 堆排序 */public class HeapSort {    public static void main(String[] args) {        int[] nums = {9, 8, 7, 4, 11, 10, 13, 15, 2, 12, 4, 5, 6, 8, 9, 5};        heapSort(nums);        MergeSort.printNums(nums);    }    /**     * @Author Nxy     * @Date 2019/12/6 11:29     * @Param     * @Return     * @Exception     * @Description 堆排序     */    public static void heapSort(int[] nums) {        if (nums == null) {            throw new RuntimeException("数组为空");        }        int length = nums.length;        for (int i = length - 1; i >= 0; i--) {            sortHeap(nums, i);            int temp = nums[0];            nums[0] = nums[i];            nums[i] = temp;        }    }    /**     * @Author Nxy     * @Date 2019/12/5 19:05     * @Param     * @Return     * @Exception     * @Description 排序一个整堆, 最底层最右边的叶子节点序号为end。最小的非叶子节点序号为 (end - 1) / 2     * 排序是从最小的非叶子节点构建堆，向上直到根节点     */    public static void sortHeap(int[] nums, int end) {        int length = nums.length;        for (int i = (end - 1) / 2; i >= 0; i--) {            sortNode(nums, i, end);        }    }    /**     * @Author Nxy     * @Date 2019/12/5 15:46     * @Param head:堆顶位置；end：序号为end及之前的元素可以用来构建堆     * @Return     * @Exception     * @Description 将一个只有三个节点的堆变为最大堆     */    public static void sortNode(int[] nums, int head, int end) {        if (head < 0) {            throw new RuntimeException("堆顶超过左边界");        }        int length = nums.length;        //左子节点坐标        int left = head * 2 + 1;        //右子节点坐标        int right = left + 1;        //判断左子节点是否存在        if (left <= end) {            //如果左子节点更大，交换            if (nums[left] > nums[head]) {                int temp = nums[head];                nums[head] = nums[left];                nums[left] = temp;            }        }        //判断右子节点是否存在        if (right <= end) {            //如果右子节点更大，交换            if (nums[right] > nums[head]) {                int temp = nums[head];                nums[head] = nums[right];                nums[right] = temp;            }        }    }}