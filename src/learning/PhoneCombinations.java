package learning;import java.util.*;public class PhoneCombinations {    List<String> result=new LinkedList<String>();    public List<String> letterCombinations(String digits) {        if(digits==null||digits.length()==0){            return result;        }        Map<Integer,char[]> m=new HashMap<Integer,char[]>();        m.put(2,new char[]{'a','b','c'});        m.put(3,new char[]{'d','e','f'});        m.put(4,new char[]{'g','h','i'});        m.put(5,new char[]{'j','k','l'});        m.put(6,new char[]{'m','n','o'});        m.put(7,new char[]{'p','q','r','s'});        m.put(8,new char[]{'t','u','v'});        m.put(9,new char[]{'w','x','y','z'});        letterCombinations(digits,new StringBuilder(),digits.length(),0,m);        return result;    }    private final void letterCombinations(String digits, StringBuilder sb,int length,int depth,Map<Integer,char[]> map){        if(depth==length){            result.add(sb.toString());            return;        }        int a=digits.charAt(depth)-'0';        int intI=0;        if(a>=48&&a<=57){            intI=Integer.valueOf(digits.charAt(depth));        }        char[] asc=map.get(intI);        int length2=asc.length;        for(int j=0;j<length2;j++){            sb.append(asc[j]);            letterCombinations(digits,sb,length,depth+1,map);            sb.deleteCharAt(sb.length()-1);        }    }    public static void main(String[] args){        String s;        LinkedList ls;        Stack stack;        PhoneCombinations p=new PhoneCombinations();        p.letterCombinations("23");    }}