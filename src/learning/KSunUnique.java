package learning;import org.omg.Messaging.SYNC_WITH_TRANSPORT;import java.util.Arrays;/** * @Author Nxy * @Date 2019/12/31 21:46 * @Description leetcode 698 划分为k个相等的子集 */public class KSunUnique {    public boolean canPartitionKSubsets(int[] nums, int k) {        if (nums == null || k == 0) {            return false;        }        int length = nums.length;        int sum = 0;        for (int i = 0; i < length; i++) {            sum += nums[i];        }        //如果平均数不为整数，无法划分        if (sum % k > 0) {            return false;        }        //每个数组和的大小        int target = sum / k;        Arrays.sort(nums);        //最大元素大于目标值，无法划分        if (nums[length - 1] > target) {            return false;        }        return canPartitionKSubsets(nums, new int[k], target, length - 1);    }    public boolean canPartitionKSubsets(int[] nums, int[] sums, int target, int numsFlag) {        if (numsFlag < 0) {            printNums(sums);            return true;        }        for (int i = 0; i < sums.length; i++) {            int temp = sums[i] + nums[numsFlag];            if (temp > target) {                continue;            }            if (temp <= target) {                sums[i] = temp;                if (canPartitionKSubsets(nums, sums, target, numsFlag - 1)) {                    return true;                }                //回溯点                sums[i] -= nums[numsFlag];            }        }        return false;    }    private void printNums(int nums[]) {        for (int i = 0; i < nums.length; i++) {            System.out.print(nums[i]);            System.out.print(",");        }        System.out.println(" ");    }    public static void main(String[] args) {        int[] nums = {1, 1, 1, 1};        KSunUnique k = new KSunUnique();        System.out.println(k.canPartitionKSubsets(nums, 4));    }}