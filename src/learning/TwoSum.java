package learning;import java.util.Arrays;public class TwoSum {    public static void main(String[] args){        int[] nums={0,4,3,0};        int target=0;        Arrays.sort(nums);        int[] result=twoSumBrother(nums,target);        if(result!=null){            for(int i=0;i<result.length;i++){                System.out.print(result[i]);                System.out.print(",");            }        }    }    public static int[] twoSumlittleBrother(int[] nums, int target) {        if(nums==null){return null;}        int length=nums.length;        for(int i=0;i<length-1;i++){            for(int j=i+1;j<length;j++){                if(nums[i]+nums[j]==target){                    return new int[]{i,j};                }            }        }        return null;    }    public static int[] twoSumBrother(int[] nums, int target){        if(nums==null){return null;}//        Arrays.sort(nums);        int length=nums.length;        for(int i=0;i<length;i++){            int secondNum=target-nums[i];            int secondNumIndex=searchInsert(nums,secondNum,i+1,length-1);            if(secondNumIndex!=-1){                return new int[]{i,secondNumIndex};            }        }        return null;    }    public static final int searchInsert(int[] nums, int target,int left,int right) {        if(nums==null){            throw new NullPointerException("目标数组为空!");        }        //边界条件        if(target>nums[right]||target<nums[left]){return -1;}        if(right==left&&nums[left]!=target){return -1;}        if(nums[left]==target){return left;}        if(nums[right]==target){return right;}        while(true){            //计算当前中点            int mid=left+(right-left)/2;            //找到目标值            if(target==nums[mid]){                return mid;            }            //未找到目标值但终止循环            if(right==left+1){                return -1;            }            if(target>nums[mid]){                left=mid;            }            if(target<nums[mid]){                right=mid;            }        }    }}