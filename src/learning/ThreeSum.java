package learning;import com.A.D.A.I;import java.util.*;/** * @Author Nxy * @Date 2019/11/18 21:15 * @Description leetcode三数之和 */class ThreeSum {    public static void main(String[] args) {        int nums[] = {-1, 0, 1, 2, -1, -4, 6, 5, 4, -6, 0, -5, 1, 3, 4, 5, 3, 2, -9, 3, 10, 19, -10, -6,0,0,0,0,9,8,7,6,4,5,3,3,2,1};        int nums1[] = {-1, 0, 1, 2, -1, -4, 6, 5, 4, -6, 0, -5, 1, 3, 4, 5, 3, 2, -9, 3, 10, 19, -10, -6,0,0,0,0,9,8,7,6,4,5,3,3,2,1};        int nums2[] = {-1, 0, 1, 2, -1, -4, 6, 5, 4, -6, 0, -5, 1, 3, 4, 5, 3, 2, -9, 3, 10, 19, -10, -6,0,0,0,0,9,8,7,6,4,5,3,3,2,1};        long time1=System.currentTimeMillis();        System.out.println(threeSumBrother(nums)+"---->普通递推用时  ： "+String.valueOf(System.currentTimeMillis()-time1));        long time2=System.currentTimeMillis();        System.out.println(threeSum(nums1)+"---->第三个数二分查找用时  ： "+String.valueOf(System.currentTimeMillis()-time2));        long time3=System.currentTimeMillis();        System.out.println(threeSumFather(nums2)+"---->第二三个数用滑尺查找用时  ： "+String.valueOf(System.currentTimeMillis()-time3));    }    public static final List<List<Integer>> threeSumFather(int[] nums) {        List<List<Integer>> ans = new LinkedList<List<Integer>>();        HashSet<List<Integer>> hs=new HashSet<List<Integer>>();        if (nums == null) {            return ans;        }        int length=nums.length;        Arrays.sort(nums);        for(int i=0;i<length-1;i++){            int j=i+1;            int k=length-1;            int target=-nums[i];            while(j!=k){                if(nums[j]+nums[k]>target){                    k--;                    continue;                }                if(nums[j]+nums[k]<target){                    j++;                    continue;                }                if(nums[j]+nums[k]==target){                    List<Integer> temp=Arrays.asList(nums[i],nums[j],nums[k]);                    if(!hs.contains(temp)){                        hs.add(temp);                        ans.add(temp);                    }                    if(k==j+1){break;}                    k--;                    j++;                }            }        }        return ans;    }    public static final List<List<Integer>> threeSumLittleBrother(int[] nums) {        List<List<Integer>> ans = new LinkedList<List<Integer>>();        if (nums == null) {            return ans;        }        int length=nums.length;        Arrays.sort(nums);        for(int i=0;i<length;i++){            for(int j=0;j<length;j++){                if(j==i){continue;}                for(int k=0;k<length;k++){                    if(k==j){continue;}                    if(nums[i]+nums[j]+nums[k]==0){                        List<Integer> temp=new ArrayList<>(3);                        temp.add(nums[i]);                        temp.add(nums[j]);                        temp.add(nums[k]);                        if(!ans.contains(temp)){                            ans.add(temp);                        }                    }                }            }        }        return ans;    }    public static final List<List<Integer>> threeSumBrother(int[] nums) {        List<List<Integer>> ans = new LinkedList<List<Integer>>();        if (nums == null) {            return ans;        }        int length=nums.length;        Arrays.sort(nums);        for(int i=0;i<length;i++){            for(int j=i+1;j<length;j++){                for(int k=j+1;k<length;k++){                    if(nums[i]+nums[j]+nums[k]==0){                        List<Integer> temp=new ArrayList<>(3);                        temp.add(nums[i]);                        temp.add(nums[j]);                        temp.add(nums[k]);                        if(!ans.contains(temp)){                            ans.add(temp);                        }                    }                }            }        }        return ans;    }    public static final List<List<Integer>> threeSum(int[] nums) {        List<List<Integer>> ans = new LinkedList<List<Integer>>();        if (nums == null) {            return ans;        }        int length = nums.length;        Arrays.sort(nums);        for (int i = 0; i < length - 2; i++) {            for (int j = i + 1; j < length - 1; j++) {                //二分查找                int tempkIndex = searchInsert(nums, -nums[i] - nums[j], j + 1, length - 1);                if (tempkIndex != -1) {                    List<Integer> templ = new LinkedList<Integer>();                    templ.add(nums[i]);                    templ.add(nums[j]);                    templ.add(nums[tempkIndex]);                    if (!ans.contains(templ)) {                        ans.add(templ);                    }                }            }        }        return ans;    }    public static final int searchInsert(int[] nums, int target, int left, int right) {        if (nums == null) {            throw new NullPointerException("目标数组为空!");        }        //边界条件        if (target > nums[right] || target < nums[left]) {            return -1;        }        if (right == left && nums[left] != target) {            return -1;        }        if (nums[left] == target) {            return left;        }        if (nums[right] == target) {            return right;        }        while (true) {            //计算当前中点            int mid = left + (right - left) / 2;            //找到目标值            if (target == nums[mid]) {                return mid;            }            //未找到目标值但终止循环            if (right == left + 1) {                return -1;            }            if (target > nums[mid]) {                left = mid;            }            if (target < nums[mid]) {                right = mid;            }        }    }}