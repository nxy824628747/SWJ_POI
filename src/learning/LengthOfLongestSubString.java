package learning;import java.util.*;/** * @Author Nxy * @Date 2019/11/15 14:52 * @Description leetcode四数之和 */public class LengthOfLongestSubString {    //结果集    static List<List<Integer>> ans = new LinkedList<List<Integer>>();    //已用过的元素索引缓存，防止重复使用元素    static List<Integer> indexSet = new LinkedList<Integer>();    //临时结果栈    static Stack<Integer> stack = new Stack<Integer>();    public final static List<List<Integer>> fourSum(int[] nums, int target, int x, int beforeI) {        if (nums == null) {            return ans;        }        int length = nums.length;        //剪枝,去重        for (int i = 0; i < length; i++) {            //回归条件，凑齐四个元素，阻止向下递归并检查是否和为target            if (x == 4) {                if (target == 0) {                    //放入结果集                    List<Integer> temp = new LinkedList<Integer>(stack);                    if (!ans.contains(temp)) {                        ans.add(temp);                    }                }                break;            }            //剪枝            if (i < beforeI) {                continue;            }            //不重复使用同一元素            if (indexSet.contains(i)) {                continue;            }            //递归深度不到4，压栈            stack.push(nums[i]);            indexSet.add(i);            //递归调用，问题抛给下一层            fourSum(nums, target - nums[i], x + 1, i);            //本层问题第i此尝试结束，回溯并进行同层级下一次尝试            stack.pop();            indexSet.remove(x);        }        return ans;    }    public static void main(String[] args) {        int[] nums = {1, 0, -1, 0, -2, 2};        Arrays.sort(nums);        fourSum(nums, 0, 0, 0);        System.out.println(ans.toString());    }}