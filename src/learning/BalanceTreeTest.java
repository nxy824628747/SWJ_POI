package learning;import com.oscar.jdbc.Array;import java.util.*;public class BalanceTreeTest {/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */    public final boolean isBalanced(TreeNode root) {        if(root==null){return true;}        return isBalanced2(root)&&isBalanced2(root.left)&&isBalanced2(root.right);    }    private final boolean isBalanced2(TreeNode root){        if(root==null){return true;}        int left=getLeft(root);        int right=getRight(root);        int temp=left-right;        if(temp<-1||temp>1){            return false;        }        return true;    }    private final int getLeft(TreeNode root){        if(root==null){return 0;}        return getDepth(root.left);    }    private final int getRight(TreeNode root){        if(root==null){return 0;}        return getDepth(root.right);    }    private final int getDepth(TreeNode root){        if(root==null){            return 0;        }        int left=getDepth(root.left)+1;        int right=getDepth(root.right)+1;        return Math.max(left,right);    }    public int judgeBalance(TreeNode root){        if(root==null){            return 0;        }        int left=judgeBalance(root.left);        if(left==-1){            return -1;        }        int right=judgeBalance(root.right);        if(right==-1){            return -1;        }        int tmp=left-right;        if(tmp>1||tmp<-1){            return -1;        }        return Math.max(right,left)+1;    }    public static void main(String[] args){        BalanceTreeTest t=new BalanceTreeTest();        TreeNode n0=new TreeNode(1);        n0.right=new TreeNode(3);        n0.right.left=new TreeNode(2);        int left=t.getLeft(n0);        int right=t.getRight(n0);        System.out.println(left+"  "+right);    }}