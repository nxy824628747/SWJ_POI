package learning;import java.util.Stack;public class ReverseBetween {    public final ListNode reverseBetween1(ListNode head, int m, int n) {        if (head == null || m >= n) {            return head;        }        int target = 1;        //虚拟头结点        ListNode tempHead = new ListNode(0);        tempHead.next = head;        //断开前缀        ListNode beforeTarget = null;        ListNode end = null;        ListNode start = null;        //断开后缀        ListNode endNextTarget = null;        while (head != null) {            if (target == m - 1) {                beforeTarget = head;            }            if (target == m) {                start = head;            }            if (target == n) {                end = head;            }            if (target == n + 1) {                endNextTarget = head;            }            head=head.next;            target++;        }        if (m > target || n > target) {            return head;        }        //m>=n、m或n越界情况已处理，mn必在链表内。头部加虚节点，m为开头的情况已处理，n为结尾的情况不影响        end.next = null;        ListNode newStart = reverse(null, start);        if(beforeTarget==null){beforeTarget=tempHead;}        beforeTarget.next = newStart;        start.next = endNextTarget;        return tempHead.next;    }     public final ListNode reverse2(ListNode head){         if(head==null){return null;}         Stack<ListNode> stack=new Stack<ListNode>();         while(head!=null){             stack.push(head);             head=head.next;         }         ListNode temp=stack.pop();         ListNode newHead=temp;         while(stack.size()!=0){             temp.next=stack.pop();             temp=temp.next;         }         return newHead;     }    public final ListNode reverse(ListNode before, ListNode head) {        if (head.next == null) {            head.next = before;            return head;        }        ListNode result = reverse(head, head.next);        head.next = before;        return result;    }    public void print(ListNode head) {        while (head != null) {            System.out.println(head.val);            head = head.next;        }    }    public static void main(String[] args) {        ReverseBetween r = new ReverseBetween();        int[] source = {1, 2, 3, 4, 5};        ListNode head = ListNode.fromSums(source);        int m = 2;        int n = 4;        r.print(r.reverse2(head));//        r.print(r.reverseBetween1(head, m, n));    }}