package learning;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;public class Chessboard {    //棋盘数组    private int[][] chessboard;    //棋盘宽度    private int x;    //棋盘高度    private int y;    public int[][] getChessboard(){        return this.chessboard;    }    //构造棋盘    public Chessboard(int x, int y) {        if (x <= 0 || y <= 0) {            throw new RuntimeException("棋盘大小必须为正整数");        }        this.x = x;        this.y = y;        chessboard = new int[x][y];    }    public int getX(){        return this.x;    }    public int getY(){        return this.y;    }    public void setQueen(int x,int y){        this.chessboard[x][y]=1;    }    //清除x以下行的棋子    public void clean(int x) {        if (x < 0 || x > this.x - 1) {            throw new RuntimeException("行号不合法");        }        for (int i = x ; i < this.x; i++) {            for (int j = 0; j < this.y; j++) {                chessboard[i][j] = 0;            }        }    }    //打印棋盘    public String print() {        if (x <= 0 || y <= 0) {            throw new RuntimeException("棋盘大小必须为正整数");        }        System.out.println("该棋盘为------>");        for (int i = 0; i < x; i++) {            StringBuffer sb = new StringBuffer();            for (int j = 0; j < y; j++) {                sb.append(chessboard[i][j]);                if (j != y - 1) {                    sb.append(",");                }            }            System.out.println(sb.toString().trim());        }        return null;    }    //查看该格子可不可以放置皇后    public boolean canSetQueen(int x, int y) {        if (x < 0 || y < 0 || x > this.x - 1 || y > this.y - 1) {            throw new RuntimeException("格子不在棋盘内！");        }        //判断同一列        for (int i = 0; i < this.x; i++) {            if (chessboard[i][y] != 0 && i != x) {                return false;            }        }        //判断同一行        for (int j = 0; j < this.y - 1; j++) {            if (chessboard[x][j] != 0 && j != y) {                return false;            }        }        //判断斜线        for (int i = 0; i < this.x; i++) {            for (int j = 0; j < this.y; j++) {                if (x - i == y - j || i - x == j - y || i - x == j - y || i - x == y - j) {                    if (chessboard[i][j] != 0) {                        return false;                    }                }            }        }        return true;    }}