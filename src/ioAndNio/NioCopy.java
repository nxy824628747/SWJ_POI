package ioAndNio;import sun.nio.ch.DirectBuffer;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.nio.Buffer;import java.nio.ByteBuffer;import java.nio.channels.Channel;import java.nio.channels.FileChannel;public class NioCopy {    static String inPath = "C:\\Users\\niuxinyu\\Desktop\\不动产证书空白底板扫描件.zip";    public static void main(String[] args){        bufferedIO();        io();        nio();        nioTransfor();//        directB();    }    //BuffedIo    private final static void bufferedIO(){        String outPath = "C:\\Users\\niuxinyu\\Desktop\\111\\不动产证书空白底板扫描件1.zip";        FileInputStream in = null;        FileOutputStream out = null;        BufferedInputStream bIn = null;        BufferedOutputStream bOut = null;        try {            long start = System.currentTimeMillis();            in = new FileInputStream(inPath);            out = new FileOutputStream(outPath);            bIn = new BufferedInputStream(in);            bOut = new BufferedOutputStream(out);            byte[] buffer = new byte[1024];            while (bIn.read(buffer) != -1) {                bOut.write(buffer);            }            long end = System.currentTimeMillis();            System.out.println("BuffedIO耗时为  ：  " + String.valueOf(end - start));        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                bIn.close();                bOut.flush();                out.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }    private final static void io() {        String outPath = "C:\\Users\\niuxinyu\\Desktop\\111\\不动产证书空白底板扫描件2.zip";        FileInputStream in = null;        FileOutputStream out = null;        try {            long start = System.currentTimeMillis();            in = new FileInputStream(inPath);            out = new FileOutputStream(outPath);            byte[] b = new byte[1024];            while (in.read(b) != -1) {                out.write(b);            }            long end = System.currentTimeMillis();            System.out.println("普通IO耗时为  ：  " + String.valueOf(end - start));        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                in.close();                out.flush();                out.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }    private final static void nio(){        String outPath = "C:\\Users\\niuxinyu\\Desktop\\111\\不动产证书空白底板扫描件3.zip";        FileInputStream in = null;        FileOutputStream out = null;        FileChannel inC=null;        FileChannel outC=null;        try {            long start = System.currentTimeMillis();            in = new FileInputStream(inPath);            out = new FileOutputStream(outPath);            inC=in.getChannel();            outC=out.getChannel();            ByteBuffer buffer= ByteBuffer.allocate(1024);            while(inC.read(buffer)!=-1){                buffer.flip();                outC.write(buffer);                buffer.clear();            }            long end = System.currentTimeMillis();            System.out.println("NIO 耗时为  ：  " + String.valueOf(end - start));        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                if(inC!=null){                    inC.close();                }                if(outC!=null){                    outC.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }    }    private final static void nioTransfor(){        String outPath = "C:\\Users\\niuxinyu\\Desktop\\111\\不动产证书空白底板扫描件4.zip";        FileInputStream in = null;        FileOutputStream out = null;        FileChannel inC=null;        FileChannel outC=null;        try {            long start = System.currentTimeMillis();            in = new FileInputStream(inPath);            out = new FileOutputStream(outPath);            inC=in.getChannel();            outC=out.getChannel();            inC.transferTo(0,inC.size(),outC);            long end = System.currentTimeMillis();            System.out.println("NIO zeroCopy耗时为  ：  " + String.valueOf(end - start));        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                if(inC!=null){                    inC.close();                }                if(outC!=null){                    outC.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }    }    public static void directB(){        ByteBuffer b=ByteBuffer.allocateDirect(204800000);        while(true){            int i=0;        }    }}