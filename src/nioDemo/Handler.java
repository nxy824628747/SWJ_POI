package nioDemo;import jdk.management.resource.internal.inst.SocketChannelImplRMHooks;import org.apache.log4j.net.SocketServer;import sun.nio.ch.SelectorImpl;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.SocketChannel;public class Handler implements Runnable {    final SocketChannel socketChannel;    final SelectionKey sk;    ByteBuffer input=ByteBuffer.allocate(1024);    ByteBuffer output=ByteBuffer.allocate(1024);    static final int SENDING=1;    static final int READING=0;    int state=READING;    Handler(Selector selector,SocketChannel c) throws IOException{        socketChannel=c;        c.configureBlocking(false);        sk=c.register(selector,0);        sk.attach(this);        sk.interestOps(SelectionKey.OP_READ);        selector.wakeup();    }    boolean inputIsComplete(){        //TO DO ...        return false;    }    boolean outputIsComplete(){        //TO DO ...        return false;    }    void process(){        //TO DO ...    }    @Override    public void run(){        try{            if(state==READING){                read();                return;            }            if(state==SENDING){                send();                return;            }        }catch(IOException e){            e.printStackTrace();        }    }    private void read() throws IOException{        socketChannel.read(input);        if(inputIsComplete()){            process();            state=SENDING;            sk.interestOps(SelectionKey.OP_WRITE);        }    }    private void send() throws IOException{        socketChannel.write(output);        if(outputIsComplete()){            sk.cancel();        }    }}