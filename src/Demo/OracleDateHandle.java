package Demo;import java.util.List;/** * @Author Nxy * @Date 2019/11/13 16:19 * @Description 将字符串处理为oracle中标准的date类型数据 */public class OracleDateHandle {    public static void main(String[] args){        System.out.println(tansfor("02:59:2"));    }    public static String tansfor(String dateStr){        String year="1901";        String month="01";        String day="01";        String time="01:01:01";        //处理无数据情况        if(dateStr==null||dateStr.length()==0){return "1901/01/01 01:01:01";}        StringBuilder sb=new StringBuilder(dateStr);        //判断日期分隔符类型        char breakType='/';        if(existsDate(dateStr)){breakType=judgeBreakType(dateStr);}        //尝试取出年份        String getYear=getYear(sb,breakType);        if(getYear!=null){year=getYear;}        //尝试取出月份        String getMonth=getMonth(sb,breakType);        if(getMonth!=null){month=getMonth;}        //尝试取出日期        String getDay=getDay(sb);        if(getDay!=null){day=getDay;}        sb=getTimeStr(sb);        String getTime=getTime(sb);        if(getTime!=null){time=getTime;}        return year+"/"+month+"/"+day+" "+time;    }    private static StringBuilder getTimeStr(StringBuilder sb){        int length=sb.length();        StringBuilder re=new StringBuilder();        int firstFlag=sb.indexOf(":");        int lastFlag=sb.lastIndexOf(":");        if(firstFlag==-1){return re.append("0");}        if(firstFlag==lastFlag&&length-lastFlag>2&&lastFlag-2>0){            re.append(sb.substring(firstFlag-2,firstFlag+1));            re.append(":00");            return re;        }        if(length-lastFlag>2&&firstFlag-2>0){            return re.append(sb.substring(firstFlag-2,lastFlag+3));        }        return re.append("0");    }//    private String getDate(StringBuilder sb,char breakType){//        String breakTypeStr=String.valueOf(breakType);//        int firstFlag=sb.indexOf(breakTypeStr);//        int lastFlag=sb.lastIndexOf(breakTypeStr);//        if(firstFlag==-1){return null;}//    }    /**    *   @Author Nxy    *   @Date 2019/11/13 17:11    *   @Param    *   @Return    *   @Exception    *   @Description 尝试取出时间    */    private static String getTime(StringBuilder sb){        int rabish=sb.indexOf(".");        if(rabish!=-1){            sb=new StringBuilder(sb.substring(0,rabish));        }        int fristFlag=sb.indexOf(":");        int lastFlag=sb.lastIndexOf(":");        if(fristFlag==lastFlag||lastFlag-fristFlag>4){return null;}        String hour=sb.substring(0,fristFlag);        String minit=sb.substring(fristFlag+1,lastFlag);        String second=sb.substring(lastFlag+1);        hour=hourHandle(hour);        minit=timeHandle(minit);        second=timeHandle(second);        if(hour!=null&&minit!=null&&second!=null){            return hour+":"+minit+":"+second;        }        return null;    }    private static String hourHandle(String s){        int l=s.length();        int sInt=Integer.valueOf(s);        if(l==1&&sInt>0&&sInt<9){            return "0"+sInt;        }        if(l==2&&sInt>0&&sInt<24){            return s;        }        return null;    }    private static String timeHandle(String s){        int l=s.length();        int sInt=Integer.valueOf(s);        if(l==1&&sInt>0&&sInt<9){            return "0"+sInt;        }        if(l==2&&sInt>0&&sInt<60){            return s;        }        return null;    }    /**    *   @Author Nxy    *   @Date 2019/11/13 16:58    *   @Param    *   @Return    *   @Exception    *   @Description 尝试取出日期并删除    */    private static String getDay(StringBuilder sb){        int firstBreak=sb.indexOf(" ");        if(!(firstBreak>0)){return null;}        String day=sb.substring(0,firstBreak);        int length=day.length();        if(length>2||length==0){return null;}        int dayInt=Integer.valueOf(day);        if(length==1||length==2){            if(length==1&&dayInt>0&&dayInt<9){return "0"+day;}            if(length==2&&dayInt>0&&dayInt<32){return day;}            sb=sb.delete(0,firstBreak+1);        }        return null;    }    /**    *   @Author Nxy    *   @Date 2019/11/13 16:51    *   @Param    *   @Return    *   @Exception    *   @Description 尝试取出月份并删除    */    private static String getMonth(StringBuilder sb,char breakType){        int firstBreak=sb.indexOf(String.valueOf(breakType));        if(!(firstBreak>0)){return null;}        String month=sb.substring(0,firstBreak);        int length=month.length();        if(length==2||length==1){            int monthInt=Integer.valueOf(month);            if(length==1&&monthInt>0&&monthInt<9){                return "0"+month;            }            if(length==2&&monthInt>0&&monthInt<13){                return month;            }            sb=sb.delete(0,firstBreak+1);        }        return null;    }    /**    *   @Author Nxy    *   @Date 2019/11/13 16:38    *   @Param    *   @Return    *   @Exception    *   @Description 尝试取出年份并删除    */    private static String getYear(StringBuilder sb,char breakType){        int firstBreak=sb.indexOf(String.valueOf(breakType));        if(!(firstBreak>0)){return null;}        String year=sb.substring(0,firstBreak);        //取出年份并删除        if(year.length()==4&&Integer.valueOf(year)>1900){            sb=sb.delete(0,firstBreak+1);            return year;        }        return null;    }    /**    *   @Author Nxy    *   @Date 2019/11/13 16:25    *   @Param    *   @Return    *   @Exception    *   @Description 判断年月日分隔符类型    */    private static char judgeBreakType(String dateStr){        if(dateStr.contains("/")){            return '/';        }        if(dateStr.contains("-")){            return '-';        }        return '/';    }    /**    *   @Author Nxy    *   @Date 2019/11/13 16:27    *   @Param    *   @Return    *   @Exception    *   @Description 按分隔符判断是否存在年月日    */    private static boolean existsDate(String dateStr){        if(dateStr.contains("/")){return true;}        if(dateStr.contains("-")){return true;}        return false;    }    /**    *   @Author Nxy    *   @Date 2019/11/13 16:29    *   @Param    *   @Return    *   @Exception    *   @Description 判断是否存在时间    */    private static boolean existsTime(String dateStr){        if(dateStr.contains(":")){return true;}        return false;    }    /**     * @Author Nxy     * @Date 2019/11/13 12:40     * @Param     * @Return     * @Exception     * @Description 递归截取flag间的字符串，会改变原StringBuilder     */    public static void getBetween(StringBuilder source, String startFlag, String endFlag, List<String> result) {        if (source == null || source.length() == 0) {            return;        }        int start = source.indexOf(startFlag);        if (start == -1) {            return;        }        source = source.delete(0, start + 1);        int end = source.indexOf(endFlag);        if (end == -1) {            return;        }        String s = source.substring(0, end);        result.add(s);        source = source.delete(0, end + 1);        getBetween(source, startFlag, endFlag, result);    }}