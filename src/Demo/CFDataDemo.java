package Demo;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import java.io.*;import java.util.*;import java.util.stream.Stream;/** * @Author Nxy * @Date 2019/11/13 16:16 * @Description 老处罚向新处罚导数据，解析错误数据excel处理错误数据并生成正确的insert语句 */public class CFDataDemo {    private static String excelsPath = "C:\\Users\\niuxinyu\\Desktop\\处罚到数据日志\\excels";    private static String outputPath = "C:\\Users\\niuxinyu\\Desktop\\处罚到数据日志\\out.txt";    private static String rn = System.getProperty("line.separator");    static OutputStreamWriter out;    public static void main(String[] args) {        try {            File file = new File(excelsPath);            out = new OutputStreamWriter(new FileOutputStream(outputPath));            String names[] = new String[file.list().length];            names = file.list();            for (int i = 0; i < names.length; i++) {                String nowfileName = excelsPath + "/" + names[i];                System.out.println("正在处理文件   ： " + nowfileName);                HSSFWorkbook excel = getExcel(nowfileName);                String sqlBefore = getsqlBefore(excel, names[i]);                outFullSql(names[i], excel, out, sqlBefore);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            closeOut(out);        }    }    private static void outFullSql(String fileName, HSSFWorkbook excel, OutputStreamWriter out, String sqlBefore) throws IOException {        HSSFSheet sheet0 = excel.getSheetAt(0);        int rowNum = sheet0.getLastRowNum() + 1;        for (int i = 1; i < rowNum; i++) {            System.out.println("正在处理第  " + i + "  行");            HSSFRow rowi = sheet0.getRow(i);            String sqlFull = getFullSql(rowi, sqlBefore, fileName);            out.write(sqlFull);            out.write(rn);        }    }    private static String getFullSql(HSSFRow row, String sqlBefore, String fileName) {        int rowSize = row.getLastCellNum() + 1;        StringBuffer sb = new StringBuffer("");        for (int i = 0; i < rowSize - 5; i++) {            HSSFCell celli = row.getCell(i);            String cellV = CurrencyTools.judgeCell(celli);            cellV = cellV.replace("“", "\"");            cellV = cellV.replace("”", "\"");            if ((fileName.contains("publish") && (i == 9 || i == 15 || i == 32)) || (fileName.contains("_INFO") && (i == 6 || i == 7 || i == 23 || i == 31 || i == 43 || i == 44 || i == 48))                    || (fileName.contains("_dsr") && (i == 5 || i == 6)) || (fileName.contains("situation") && (i == 3 || i == 4 || i == 5 || i == 16 || i == 17 || i == 19))) {                sb.append(transforDate(cellV));            } else {                sb.append("'");                if (cellV.length() < 1500) {                    sb.append(cellV);                }                sb.append("'");            }            sb.append(",");        }        String sbC = sb.substring(0, sb.length() - 1);        sbC = sbC.replace("00:00:00", "01:01:01");        return sqlBefore + sbC + ");";    }    //处理各种变态的时间字符串    private static String transforDate(String dateString) {        if (dateString == null || dateString.length() == 0) {            return "to_date('1900/01/01 01:01:01','yyyy/mm/dd hh:mi:ss')";        }        int length = dateString.length();        //处理只有年份的数据        if (length == 4 && !dateString.contains("-") && !dateString.contains("/")) {            int dateInt = Integer.valueOf(dateString);            if (1300 < dateInt && dateInt < 2999) {                dateString = dateString + "/01/01 01:01:01";            }        }        //处理没有时间的数据        if (!dateString.contains(":")) {            dateString = dateString + "01:01:01";        }        char f = dateString.charAt(4);        //处理月份和日期只有一位的情况        if (length > 16 && length < 19) {            dateString = transforMonthAndDay(dateString, f);        }        //处理过多的小数位        if (dateString.contains(".")) {            int start = dateString.indexOf(".");            dateString = dateString.substring(0, start);        }        //TO-DO SOMETHNG        return transforMonthAndDay(dateString, f);    }    //处理月和天只有一位的情况    private static String transforMonthAndDay(String dateString, char f) {        if (dateString == null || dateString.length() == 0) {            return null;        }        int start = dateString.indexOf(f);        String afterYearStr = dateString.substring(start + 1);        int end = afterYearStr.indexOf(f);        String mon = dateString.substring(0, end);        StringBuilder sb = new StringBuilder(dateString);        if (mon.length() == 1) {            sb.insert(start + 1, "0");        }        end = sb.lastIndexOf(String.valueOf(f));        int endDay = dateString.indexOf(" ");        String day = dateString.substring(end + 1, endDay);        if (day.length() == 1) {            sb.insert(end + 1, "0");        }        return sb.toString();    }    private static String to_date(String dateString, String f) {        if ("/".equals(f)) {            return "to_date('" + dateString + "','yyyy/mm/dd hh:mi:ss') ";        }        return "to_date('" + dateString + "','yyyy-mm-dd hh:mi:ss') ";    }    private static String getsqlBefore(HSSFWorkbook excel, String tableName) {        String tabeNameC = tableName.replace(".xls", "");        HSSFSheet sheet0 = excel.getSheetAt(0);        HSSFRow row0 = sheet0.getRow(0);        int rowSize = row0.getLastCellNum();        List<String> keyList = new ArrayList<String>(rowSize + 1);        StringBuffer keysStr = new StringBuffer("");        //数据库字段集合        for (int i = 0; i <= rowSize - 5; i++) {            String key = CurrencyTools.judgeCell(row0.getCell(i));            keysStr.append(key);            keysStr.append(",");            keyList.add(key);        }        String keysStrC = keysStr.toString();        String keysStrCC = keysStrC.substring(0, keysStrC.length() - 1);        String sqlBefore = "insert into " + tabeNameC + "(" + keysStrCC + ") values(";        return sqlBefore;    }    private static HSSFWorkbook getExcel(String path) {        HSSFWorkbook excel = null;        try {            excel = new HSSFWorkbook(new FileInputStream(path));        } catch (IOException e) {            e.printStackTrace();        }        return excel;    }    private static void closeOut(OutputStreamWriter o) {        if (o == null) {            return;        }        try {            o.flush();            o.close();        } catch (IOException e) {            e.printStackTrace();        }    }}